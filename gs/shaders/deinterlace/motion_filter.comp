#version 450
// SPDX-FileCopyrightText: 2024 Arntzen Software AS
// SPDX-FileContributor: Hans-Kristian Arntzen
// SPDX-License-Identifier: LGPL-3.0+
#extension GL_EXT_samplerless_texture_functions : require

layout(local_size_x = 8, local_size_y = 8) in;
layout(set = 0, binding = 0) writeonly uniform iimage2D uMotion;
layout(set = 0, binding = 1) uniform isampler2D uRawMotion;

// 3x3 median filter. Same impl as FidelityFX Optical Flow.

layout(push_constant) uniform Registers
{
    ivec2 resolution;
    vec2 inv_resolution;
};

uint idist(ivec2 a, ivec2 b)
{
    ivec2 d = a - b;
    return d.x * d.x + d.y * d.y;
}

void main()
{
    if (any(greaterThanEqual(ivec2(gl_GlobalInvocationID.xy), resolution)))
        return;

    ivec2 motion[9];
    vec2 uv = vec2(gl_GlobalInvocationID.xy) * inv_resolution;
    ivec4 x00 = textureGatherOffset(uRawMotion, uv, ivec2(0, 0), 0);
    ivec4 x10 = textureGatherOffset(uRawMotion, uv, ivec2(2, 0), 0);
    ivec4 x01 = textureGatherOffset(uRawMotion, uv, ivec2(0, 2), 0);
    ivec4 x11 = textureGatherOffset(uRawMotion, uv, ivec2(1, 2), 0);
    ivec4 y00 = textureGatherOffset(uRawMotion, uv, ivec2(0, 0), 1);
    ivec4 y10 = textureGatherOffset(uRawMotion, uv, ivec2(1, 0), 1);
    ivec4 y01 = textureGatherOffset(uRawMotion, uv, ivec2(0, 2), 1);
    ivec4 y11 = textureGatherOffset(uRawMotion, uv, ivec2(1, 2), 1);

    motion[0] = ivec2(x00.x, y00.x);
    motion[1] = ivec2(x00.y, y00.y);
    motion[2] = ivec2(x00.z, y00.z);
    motion[3] = ivec2(x00.w, y00.w);
    motion[4] = ivec2(x01.z, y01.z);
    motion[5] = ivec2(x01.w, y01.w);
    motion[6] = ivec2(x10.x, y10.x);
    motion[7] = ivec2(x10.w, y10.w);
    motion[8] = ivec2(x11.w, y11.w);

    uint best_mv = ~0u;

    for (int j = 0; j < 9; j++)
    {
        ivec2 reference = motion[j];
        uint dist = 0u;
        for (int i = 0; i < 9; i++)
            dist += idist(motion[i], motion[j]);

        dist = bitfieldInsert(dist << 4u, uint(j), 0, 4);
        best_mv = min(dist, best_mv);
    }

    uint index = bitfieldExtract(best_mv, 0, 4);
    imageStore(uMotion, ivec2(gl_GlobalInvocationID.xy), ivec4(motion[index], 0, 0));
}